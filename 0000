<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Admin Dashboard</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-auth.js"></script>
    
    <style>
        :root {
            /* Color Palette */
            --primary: #6366f1;
            --primary-light: #a5b4fc;
            --primary-dark: #4338ca;
            --secondary: #10b981;
            --secondary-light: #6ee7b7;
            --secondary-dark: #059669;
            --accent: #f59e0b;
            --danger: #ef4444;
            --warning: #f59e0b;
            
            /* Neutrals */
            --white: #ffffff;
            --gray-50: #f8fafc;
            --gray-100: #f1f5f9;
            --gray-200: #e2e8f0;
            --gray-300: #cbd5e1;
            --gray-400: #94a3b8;
            --gray-500: #64748b;
            --gray-600: #475569;
            --gray-700: #334155;
            --gray-800: #1e293b;
            --gray-900: #0f172a;
            
            /* Spacing */
            --space-1: 0.25rem;
            --space-2: 0.5rem;
            --space-3: 0.75rem;
            --space-4: 1rem;
            --space-5: 1.25rem;
            --space-6: 1.5rem;
            --space-8: 2rem;
            --space-10: 2.5rem;
            --space-12: 3rem;
            
            /* Border radius */
            --radius: 0.5rem;
            --radius-lg: 0.75rem;
            --radius-xl: 1rem;
            
            /* Shadows */
            --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
            --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
            --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background-color: var(--gray-50);
            color: var(--gray-900);
            line-height: 1.6;
            min-height: 100vh;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: var(--space-6);
        }

        /* Header */
        .header {
            text-align: center;
            margin-bottom: var(--space-10);
        }

        .header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--gray-900);
            margin-bottom: var(--space-3);
        }

        .header p {
            color: var(--gray-600);
            font-size: 1.1rem;
            margin-bottom: var(--space-8);
        }

        .auth-section {
            display: flex;
            gap: var(--space-4);
            justify-content: center;
            align-items: center;
        }

        /* Layout */
        .main-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: var(--space-8);
            align-items: start;
        }

        /* Cards */
        .card {
            background: var(--white);
            border-radius: var(--radius-xl);
            border: 1px solid var(--gray-200);
            box-shadow: var(--shadow);
            overflow: hidden;
            transition: all 0.2s ease;
        }

        .card:hover {
            box-shadow: var(--shadow-lg);
        }

        .card-header {
            padding: var(--space-6);
            border-bottom: 1px solid var(--gray-200);
            background: var(--gray-50);
        }

        .card-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--gray-900);
            display: flex;
            align-items: center;
            gap: var(--space-3);
        }

        .card-content {
            padding: var(--space-6);
        }

        /* Forms */
        .form-group {
            margin-bottom: var(--space-5);
        }

        .form-label {
            display: block;
            font-weight: 500;
            color: var(--gray-700);
            margin-bottom: var(--space-2);
            font-size: 0.875rem;
        }

        .form-input {
            width: 100%;
            padding: var(--space-3) var(--space-4);
            border: 2px solid var(--gray-200);
            border-radius: var(--radius);
            font-size: 1rem;
            transition: all 0.2s ease;
            background: var(--white);
            font-family: inherit;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgb(99 102 241 / 0.1);
        }

        .form-input:invalid:not(:focus) {
            border-color: var(--danger);
        }

        textarea.form-input {
            resize: vertical;
            min-height: 100px;
        }

        /* Buttons */
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: var(--space-2);
            padding: var(--space-3) var(--space-5);
            border: none;
            border-radius: var(--radius);
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            text-decoration: none;
            min-height: 44px;
            font-family: inherit;
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .btn-primary {
            background: var(--primary);
            color: var(--white);
        }

        .btn-primary:hover:not(:disabled) {
            background: var(--primary-dark);
            transform: translateY(-1px);
        }

        .btn-secondary {
            background: var(--secondary);
            color: var(--white);
        }

        .btn-secondary:hover:not(:disabled) {
            background: var(--secondary-dark);
            transform: translateY(-1px);
        }

        .btn-danger {
            background: var(--danger);
            color: var(--white);
        }

        .btn-danger:hover:not(:disabled) {
            background: #dc2626;
            transform: translateY(-1px);
        }

        .btn-outline {
            background: transparent;
            color: var(--gray-700);
            border: 2px solid var(--gray-300);
        }

        .btn-outline:hover:not(:disabled) {
            background: var(--gray-50);
            border-color: var(--gray-400);
        }

        .btn-sm {
            padding: var(--space-2) var(--space-4);
            font-size: 0.75rem;
            min-height: 36px;
        }

        .btn-group {
            display: flex;
            gap: var(--space-3);
            flex-wrap: wrap;
            margin-top: var(--space-6);
        }

        /* Image URL inputs */
        .image-urls-container {
            margin-bottom: var(--space-4);
        }

        .image-url-input {
            display: flex;
            gap: var(--space-3);
            margin-bottom: var(--space-3);
            align-items: center;
        }

        .image-url-input input {
            flex: 1;
        }

        /* Products list */
        .products-container {
            max-height: 600px;
            overflow-y: auto;
        }

        .products-container::-webkit-scrollbar {
            width: 6px;
        }

        .products-container::-webkit-scrollbar-track {
            background: var(--gray-100);
            border-radius: var(--radius);
        }

        .products-container::-webkit-scrollbar-thumb {
            background: var(--gray-300);
            border-radius: var(--radius);
        }

        .product-item {
            padding: var(--space-5);
            border: 1px solid var(--gray-200);
            border-radius: var(--radius-lg);
            margin-bottom: var(--space-4);
            background: var(--white);
            transition: all 0.2s ease;
        }

        .product-item:hover {
            border-color: var(--primary-light);
            box-shadow: var(--shadow-md);
        }

        .product-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: var(--space-4);
        }

        .product-name {
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--gray-900);
            margin-bottom: var(--space-2);
        }

        .product-category {
            display: inline-block;
            padding: var(--space-1) var(--space-3);
            background: var(--primary-light);
            color: var(--primary-dark);
            border-radius: var(--radius);
            font-size: 0.75rem;
            font-weight: 500;
        }

        .product-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: var(--space-3);
            margin-bottom: var(--space-3);
        }

        .product-detail {
            font-size: 0.875rem;
            color: var(--gray-600);
        }

        .product-detail strong {
            color: var(--gray-900);
            font-weight: 500;
        }

        .product-description {
            font-size: 0.875rem;
            color: var(--gray-500);
            font-style: italic;
            margin-top: var(--space-3);
            padding-top: var(--space-3);
            border-top: 1px solid var(--gray-200);
        }

        .product-actions {
            display: flex;
            gap: var(--space-2);
        }

        /* Loading */
        .loading {
            display: none;
            justify-content: center;
            align-items: center;
            padding: var(--space-10);
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 3px solid var(--gray-200);
            border-top: 3px solid var(--primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Notifications */
        .notification {
            position: fixed;
            top: var(--space-5);
            right: var(--space-5);
            padding: var(--space-4) var(--space-5);
            border-radius: var(--radius-lg);
            color: var(--white);
            font-weight: 500;
            box-shadow: var(--shadow-lg);
            z-index: 1000;
            transform: translateX(calc(100% + var(--space-5)));
            transition: transform 0.3s ease;
            max-width: 350px;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.success {
            background: var(--secondary);
        }

        .notification.error {
            background: var(--danger);
        }

        .notification.warning {
            background: var(--warning);
        }

        /* Empty state */
        .empty-state {
            text-align: center;
            padding: var(--space-10) var(--space-5);
            color: var(--gray-500);
        }

        .empty-state svg {
            width: 64px;
            height: 64px;
            margin-bottom: var(--space-4);
            opacity: 0.5;
        }

        .empty-state h3 {
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--gray-700);
            margin-bottom: var(--space-2);
        }

        /* Icons */
        .icon {
            width: 20px;
            height: 20px;
            fill: currentColor;
        }

        /* Required indicator */
        .required {
            color: var(--danger);
        }

        /* Responsive */
        @media (max-width: 1024px) {
            .main-grid {
                grid-template-columns: 1fr;
                gap: var(--space-6);
            }
        }

        @media (max-width: 768px) {
            .container {
                padding: var(--space-4);
            }

            .header h1 {
                font-size: 2rem;
            }

            .card-header,
            .card-content {
                padding: var(--space-4);
            }

            .product-item {
                padding: var(--space-4);
            }

            .product-header {
                flex-direction: column;
                gap: var(--space-3);
            }

            .product-actions {
                align-self: stretch;
            }

            .btn-group {
                flex-direction: column;
            }

            .image-url-input {
                flex-direction: column;
                align-items: stretch;
            }

            .auth-section {
                flex-direction: column;
            }

            .product-details {
                grid-template-columns: 1fr;
            }
        }

        /* Focus styles */
        .btn:focus-visible,
        .form-input:focus-visible {
            outline: 2px solid var(--primary);
            outline-offset: 2px;
        }

        /* Form validation */
        .form-input.error {
            border-color: var(--danger);
            animation: shake 0.3s ease-in-out;
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-4px); }
            75% { transform: translateX(4px); }
        }

        /* Button loading state */
        .btn.loading {
            pointer-events: none;
            opacity: 0.7;
        }

        .btn.loading::after {
            content: '';
            width: 14px;
            height: 14px;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: var(--space-2);
        }
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1>📦 Product Dashboard</h1>
            <p>Manage your product inventory efficiently</p>
            <div class="auth-section">
                <button id="googleSignIn" class="btn btn-primary">
                    <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"/>
                        <polyline points="10,17 15,12 10,7"/>
                        <line x1="15" y1="12" x2="3" y2="12"/>
                    </svg>
                    Sign In with Google
                </button>
                <button id="googleSignOut" class="btn btn-outline" style="display: none;">
                    <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M9 21H5a2 2 0 01-2-2V5a2 2 0 012-2h4"/>
                        <polyline points="16,17 21,12 16,7"/>
                        <line x1="21" y1="12" x2="9" y2="12"/>
                    </svg>
                    Sign Out
                </button>
            </div>
        </header>

        <div class="main-grid">
            <!-- Product Form -->
            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">
                        <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M12 5v14m7-7H5"/>
                        </svg>
                        <span id="formTitle">Add Product</span>
                    </h2>
                </div>
                <div class="card-content">
                    <form id="productForm">
                        <input type="hidden" id="productId">

                        <div class="form-group">
                            <label class="form-label" for="productName">
                                Product Name <span class="required">*</span>
                            </label>
                            <input 
                                type="text" 
                                id="productName" 
                                class="form-input" 
                                placeholder="Enter product name" 
                                required
                            >
                        </div>

                        <div class="form-group">
                            <label class="form-label" for="productCategory">
                                Category <span class="required">*</span>
                            </label>
                            <input 
                                type="text" 
                                id="productCategory" 
                                class="form-input" 
                                placeholder="e.g., Electronics, Clothing" 
                                required
                            >
                        </div>

                        <div class="form-group">
                            <label class="form-label" for="productOriginalPrice">
                                Original Price (₹)
                            </label>
                            <input 
                                type="number" 
                                id="productOriginalPrice" 
                                class="form-input" 
                                placeholder="0.00" 
                                step="0.01" 
                                min="0"
                            >
                        </div>

                        <div class="form-group">
                            <label class="form-label" for="productCurrentPrice">
                                Current Price (₹) <span class="required">*</span>
                            </label>
                            <input 
                                type="number" 
                                id="productCurrentPrice" 
                                class="form-input" 
                                placeholder="0.00" 
                                step="0.01" 
                                min="0" 
                                required
                            >
                        </div>

                        <div class="form-group">
                            <label class="form-label">
                                Product Images <span class="required">*</span>
                            </label>
                            <div class="image-urls-container" id="imageUrlsContainer">
                                <div class="image-url-input">
                                    <input 
                                        type="url" 
                                        class="form-input" 
                                        placeholder="https://example.com/image.jpg" 
                                        required
                                    >
                                    <button type="button" class="btn btn-secondary btn-sm" onclick="addImageUrlInput()">
                                        <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <path d="M12 5v14m7-7H5"/>
                                        </svg>
                                        Add
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="form-label" for="productVideoUrl">
                                Video URL
                            </label>
                            <input 
                                type="url" 
                                id="productVideoUrl" 
                                class="form-input" 
                                placeholder="https://youtube.com/watch?v=..."
                            >
                        </div>

                        <div class="form-group">
                            <label class="form-label" for="productPromoMessage">
                                Promotional Message
                            </label>
                            <input 
                                type="text" 
                                id="productPromoMessage" 
                                class="form-input" 
                                placeholder="e.g., Limited Time Offer"
                            >
                        </div>

                        <div class="form-group">
                            <label class="form-label" for="productDescription">
                                Description
                            </label>
                            <textarea 
                                id="productDescription" 
                                class="form-input" 
                                placeholder="Product description..." 
                                rows="4"
                            ></textarea>
                        </div>

                        <div class="btn-group">
                            <button type="button" id="addBtn" class="btn btn-primary" onclick="addProduct()">
                                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M12 5v14m7-7H5"/>
                                </svg>
                                Add Product
                            </button>
                            <button type="button" id="updateBtn" class="btn btn-secondary" onclick="updateProduct()" style="display: none;">
                                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M19 21H5a2 2 0 01-2-2V5a2 2 0 012-2h11l5 5v11a2 2 0 01-2 2z"/>
                                </svg>
                                Update Product
                            </button>
                            <button type="button" class="btn btn-outline" onclick="clearForm()">
                                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M18 6L6 18M6 6l12 12"/>
                                </svg>
                                Clear
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Products List -->
            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">
                        <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M21 16V8a2 2 0 00-1-1.73l-7-4a2 2 0 00-2 0l-7 4A2 2 0 003 8v8a2 2 0 001 1.73l7 4a2 2 0 002 0l7-4A2 2 0 0021 16z"/>
                        </svg>
                        Products
                    </h2>
                    <button class="btn btn-outline btn-sm" onclick="fetchProducts()">
                        <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <polyline points="23 4 23 10 17 10"/>
                            <path d="M3.51 9a9 9 0 0114.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0020.49 15"/>
                        </svg>
                        Refresh
                    </button>
                </div>
                <div class="card-content">
                    <div class="loading" id="loadingSpinner">
                        <div class="spinner"></div>
                    </div>

                    <div class="products-container" id="productList">
                        <div class="empty-state">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M21 16V8a2 2 0 00-1-1.73l-7-4a2 2 0 00-2 0l-7 4A2 2 0 003 8v8a2 2 0 001 1.73l7 4a2 2 0 002 0l7-4A2 2 0 0021 16z"/>
                            </svg>
                            <h3>No products found</h3>
                            <p>Add your first product to get started!</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Firebase Configuration
        const firebaseConfig = {
            apiKey: "AIzaSyD9M_BjTdF8Wq-gaezYKYim1lyMZZPe-HQ",
            authDomain: "d-print-bc0e0.firebaseapp.com",
            projectId: "d-print-bc0e0",
            storageBucket: "d-print-bc0e0.appspot.com",
            messagingSenderId: "1035629666186",
            appId: "1:1035629666186:web:ad996c1fe3e1b997713273"
        };

        firebase.initializeApp(firebaseConfig);

        // Store products globally for edit functionality
        let allProducts = [];

        // Utility Functions
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => notification.classList.add('show'), 100);
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => {
                    if (document.body.contains(notification)) {
                        document.body.removeChild(notification);
                    }
                }, 300);
            }, 3000);
        }

        function showLoading(show = true) {
            const spinner = document.getElementById('loadingSpinner');
            const productList = document.getElementById('productList');

            if (show) {
                spinner.style.display = 'flex';
                productList.style.display = 'none';
            } else {
                spinner.style.display = 'none';
                productList.style.display = 'block';
            }
        }

        function formatCurrency(amount) {
            return amount ? `₹${parseFloat(amount).toLocaleString('en-IN', { minimumFractionDigits: 2 })}` : 'N/A';
        }

        function escapeHtml(text) {
            if (!text) return '';
            const map = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#039;'
            };
            return text.toString().replace(/[&<>"']/g, m => map[m]);
        }

        function setButtonLoading(buttonId, loading = true) {
            const button = document.getElementById(buttonId);
            if (loading) {
                button.classList.add('loading');
                button.disabled = true;
            } else {
                button.classList.remove('loading');
                button.disabled = false;
            }
        }

        function validateForm() {
            const name = document.getElementById('productName').value.trim();
            const category = document.getElementById('productCategory').value.trim();
            const currentPrice = document.getElementById('productCurrentPrice').value;
            const imageInputs = document.querySelectorAll('#imageUrlsContainer input[type="url"]');
            const pictureUrls = Array.from(imageInputs).map(input => input.value.trim()).filter(url => url);

            if (!name || !category || !currentPrice || pictureUrls.length === 0) {
                showNotification('Please fill in all required fields', 'error');
                return false;
            }

            if (parseFloat(currentPrice) < 0) {
                showNotification('Price cannot be negative', 'error');
                return false;
            }

            return true;
        }

        // Image URL Management
        function addImageUrlInput() {
            const container = document.getElementById('imageUrlsContainer');
            const inputDiv = document.createElement('div');
            inputDiv.className = 'image-url-input';
            inputDiv.innerHTML = `
                <input type="url" class="form-input" placeholder="https://example.com/image.jpg">
                <button type="button" class="btn btn-danger btn-sm" onclick="removeImageUrlInput(this)">
                    <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="3,6 5,6 21,6"/>
                        <path d="M19,6v14a2,2 0 01-2,2H7a2,2 0 01-2-2V6"/>
                    </svg>
                    Remove
                </button>
            `;
            container.appendChild(inputDiv);
        }

        function removeImageUrlInput(button) {
            const container = document.getElementById('imageUrlsContainer');
            if (container.children.length > 1) {
                button.parentElement.remove();
            } else {
                showNotification('At least one image URL is required', 'warning');
            }
        }

        // Product Management
        async function fetchProducts() {
            try {
                showLoading(true);
                const user = firebase.auth().currentUser;
                const idToken = user ? await user.getIdToken() : null;

                const response = await fetch('https://threedprintb.onrender.com/products', {
                    headers: {
                        'Authorization': idToken ? `Bearer ${idToken}` : ''
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const products = await response.json();
                allProducts = products; // Store products globally
                renderProducts(products);
            } catch (error) {
                console.error('Error fetching products:', error);
                showNotification('Failed to fetch products', 'error');
                renderEmptyState('Failed to load products');
            } finally {
                showLoading(false);
            }
        }

        function renderProducts(products) {
            const productList = document.getElementById('productList');

            if (!products || products.length === 0) {
                renderEmptyState();
                return;
            }

            productList.innerHTML = '';
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product-item';
                productDiv.innerHTML = `
                    <div class="product-header">
                        <div>
                            <div class="product-name">${escapeHtml(product.name)}</div>
                            <span class="product-category">${escapeHtml(product.category || 'N/A')}</span>
                        </div>
                        <div class="product-actions">
                            <button class="btn btn-primary btn-sm" onclick="editProduct('${product.id}')">
                                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M11 4H4a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2v-7"/>
                                    <path d="M18.5 2.5a2.121 2.121 0 013 3L12 15l-4 1 1-4 9.5-9.5z"/>
                                </svg>
                                Edit
                            </button>
                            <button class="btn btn-danger btn-sm" onclick="deleteProduct('${product.id}')">
                                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <polyline points="3,6 5,6 21,6"/>
                                    <path d="M19,6v14a2,2 0 01-2,2H7a2,2 0 01-2-2V6"/>
                                </svg>
                                Delete
                            </button>
                        </div>
                    </div>
                    <div class="product-details">
                        <div class="product-detail"><strong>Original Price:</strong> ${formatCurrency(product.originalPrice)}</div>
                        <div class="product-detail"><strong>Current Price:</strong> ${formatCurrency(product.currentPrice)}</div>
                        <div class="product-detail"><strong>Images:</strong> ${product.pictureUrls ? product.pictureUrls.length : 0}</div>
                        ${product.promoMessage ? `<div class="product-detail"><strong>Promo:</strong> ${escapeHtml(product.promoMessage)}</div>` : ''}
                    </div>
                    ${product.description ? `<div class="product-description">${escapeHtml(product.description)}</div>` : ''}
                `;
                productList.appendChild(productDiv);
            });
        }

        function renderEmptyState(message = null) {
            const productList = document.getElementById('productList');
            productList.innerHTML = `
                <div class="empty-state">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M21 16V8a2 2 0 00-1-1.73l-7-4a2 2 0 00-2 0l-7 4A2 2 0 003 8v8a2 2 0 001 1.73l7 4a2 2 0 002 0l7-4A2 2 0 0021 16z"/>
                    </svg>
                    <h3>${message ? 'Error Loading Products' : 'No products found'}</h3>
                    <p>${message || 'Add your first product to get started!'}</p>
                </div>
            `;
        }

        async function addProduct() {
            if (!validateForm()) return;

            const name = document.getElementById('productName').value.trim();
            const category = document.getElementById('productCategory').value.trim();
            const originalPrice = document.getElementById('productOriginalPrice').value;
            const currentPrice = document.getElementById('productCurrentPrice').value;
            const imageUrlInputs = document.querySelectorAll('#imageUrlsContainer input[type="url"]');
            const videoUrl = document.getElementById('productVideoUrl').value.trim();
            const promoMessage = document.getElementById('productPromoMessage').value.trim();
            const description = document.getElementById('productDescription').value.trim();

            const pictureUrls = Array.from(imageUrlInputs).map(input => input.value.trim()).filter(url => url);

            const product = {
                name,
                category,
                originalPrice: originalPrice || null,
                currentPrice: parseFloat(currentPrice),
                pictureUrls,
                videoUrl: videoUrl || null,
                promoMessage: promoMessage || null,
                description: description || null
            };

            try {
                setButtonLoading('addBtn', true);
                const user = firebase.auth().currentUser;
                if (!user) {
                    throw new Error('You must be logged in');
                }

                const idToken = await user.getIdToken();
                const response = await fetch('https://threedprintb.onrender.com/products', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${idToken}`
                    },
                    body: JSON.stringify(product)
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                showNotification('Product added successfully!');
                fetchProducts();
                clearForm();
            } catch (error) {
                console.error('Error adding product:', error);
                showNotification('Failed to add product', 'error');
            } finally {
                setButtonLoading('addBtn', false);
            }
        }

        async function updateProduct() {
            if (!validateForm()) return;

            const id = document.getElementById('productId').value;
            const name = document.getElementById('productName').value.trim();
            const category = document.getElementById('productCategory').value.trim();
            const originalPrice = document.getElementById('productOriginalPrice').value;
            const currentPrice = document.getElementById('productCurrentPrice').value;
            const imageUrlInputs = document.querySelectorAll('#imageUrlsContainer input[type="url"]');
            const videoUrl = document.getElementById('productVideoUrl').value.trim();
            const promoMessage = document.getElementById('productPromoMessage').value.trim();
            const description = document.getElementById('productDescription').value.trim();

            const pictureUrls = Array.from(imageUrlInputs).map(input => input.value.trim()).filter(url => url);

            const product = {
                name,
                category,
                originalPrice: originalPrice || null,
                currentPrice: parseFloat(currentPrice),
                pictureUrls,
                videoUrl: videoUrl || null,
                promoMessage: promoMessage || null,
                description: description || null
            };

            try {
                setButtonLoading('updateBtn', true);
                const user = firebase.auth().currentUser;
                if (!user) {
                    throw new Error('You must be logged in');
                }

                const idToken = await user.getIdToken();
                const response = await fetch(`https://threedprintb.onrender.com/products/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${idToken}`
                    },
                    body: JSON.stringify(product)
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                showNotification('Product updated successfully!');
                fetchProducts();
                clearForm();
            } catch (error) {
                console.error('Error updating product:', error);
                showNotification('Failed to update product', 'error');
            } finally {
                setButtonLoading('updateBtn', false);
            }
        }

        // Fixed editProduct function
        function editProduct(productId) {
            // Find the product in the stored array
            const product = allProducts.find(p => p.id === productId);
            
            if (!product) {
                showNotification('Product not found', 'error');
                return;
            }

            // Populate form fields
            document.getElementById('productId').value = productId;
            document.getElementById('productName').value = product.name || '';
            document.getElementById('productCategory').value = product.category || '';
            document.getElementById('productOriginalPrice').value = product.originalPrice || '';
            document.getElementById('productCurrentPrice').value = product.currentPrice || '';

            // Handle image URLs
            const imageUrlsContainer = document.getElementById('imageUrlsContainer');
            imageUrlsContainer.innerHTML = '';

            if (product.pictureUrls && product.pictureUrls.length > 0) {
                product.pictureUrls.forEach(url => {
                    const inputDiv = document.createElement('div');
                    inputDiv.className = 'image-url-input';
                    inputDiv.innerHTML = `
                        <input type="url" class="form-input" placeholder="https://example.com/image.jpg" value="${url}">
                        <button type="button" class="btn btn-danger btn-sm" onclick="removeImageUrlInput(this)">
                            <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <polyline points="3,6 5,6 21,6"/>
                                <path d="M19,6v14a2,2 0 01-2,2H7a2,2 0 01-2-2V6"/>
                            </svg>
                            Remove
                        </button>
                    `;
                    imageUrlsContainer.appendChild(inputDiv);
                });
            } else {
                addImageUrlInput();
            }

            document.getElementById('productVideoUrl').value = product.videoUrl || '';
            document.getElementById('productPromoMessage').value = product.promoMessage || '';
            document.getElementById('productDescription').value = product.description || '';

            // Update UI for edit mode
            document.getElementById('formTitle').textContent = 'Edit Product';
            document.getElementById('addBtn').style.display = 'none';
            document.getElementById('updateBtn').style.display = 'inline-flex';

            // Scroll to form
            document.querySelector('.card').scrollIntoView({ behavior: 'smooth' });
        }

        async function deleteProduct(id) {
            if (!confirm('Are you sure you want to delete this product?')) {
                return;
            }

            try {
                const user = firebase.auth().currentUser;
                if (!user) {
                    throw new Error('You must be logged in');
                }

                const idToken = await user.getIdToken();
                const response = await fetch(`https://threedprintb.onrender.com/products/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${idToken}`
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                showNotification('Product deleted successfully!');
                fetchProducts();
            } catch (error) {
                console.error('Error deleting product:', error);
                showNotification('Failed to delete product', 'error');
            }
        }

        function clearForm() {
            document.getElementById('productId').value = '';
            document.getElementById('productName').value = '';
            document.getElementById('productCategory').value = '';
            document.getElementById('productOriginalPrice').value = '';
            document.getElementById('productCurrentPrice').value = '';
            document.getElementById('imageUrlsContainer').innerHTML = `
                <div class="image-url-input">
                    <input type="url" class="form-input" placeholder="https://example.com/image.jpg" required>
                    <button type="button" class="btn btn-secondary btn-sm" onclick="addImageUrlInput()">
                        <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M12 5v14m7-7H5"/>
                        </svg>
                        Add
                    </button>
                </div>
            `;
            document.getElementById('productVideoUrl').value = '';
            document.getElementById('productPromoMessage').value = '';
            document.getElementById('productDescription').value = '';

            document.getElementById('formTitle').textContent = 'Add Product';
            document.getElementById('addBtn').style.display = 'inline-flex';
            document.getElementById('updateBtn').style.display = 'none';
        }

        // Authentication
        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('googleSignIn').addEventListener('click', function() {
                const provider = new firebase.auth.GoogleAuthProvider();
                firebase.auth().signInWithPopup(provider)
                    .then((result) => {
                        console.log('User signed in:', result.user);
                        document.getElementById('googleSignIn').style.display = 'none';
                        document.getElementById('googleSignOut').style.display = 'inline-flex';
                        showNotification('Signed in successfully!');
                        fetchProducts();
                    })
                    .catch((error) => {
                        console.error('Error during sign in:', error);
                        showNotification('Sign in failed: ' + error.message, 'error');
                    });
            });

            document.getElementById('googleSignOut').addEventListener('click', function() {
                firebase.auth().signOut()
                    .then(() => {
                        console.log('User signed out');
                        document.getElementById('googleSignIn').style.display = 'inline-flex';
                        document.getElementById('googleSignOut').style.display = 'none';
                        showNotification('Signed out successfully!');
                        renderEmptyState('Please sign in to view products');
                    })
                    .catch((error) => {
                        console.error('Error during sign out:', error);
                    });
            });

            firebase.auth().onAuthStateChanged((user) => {
                if (user) {
                    console.log('User is signed in:', user);
                    document.getElementById('googleSignIn').style.display = 'none';
                    document.getElementById('googleSignOut').style.display = 'inline-flex';
                    fetchProducts();
                } else {
                    console.log('User is signed out');
                    document.getElementById('googleSignIn').style.display = 'inline-flex';
                    document.getElementById('googleSignOut').style.display = 'none';
                }
            });
        });
    </script>
</body>
</html>
